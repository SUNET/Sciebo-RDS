openapi: 3.0.0
info:
  title: Interface for Ports used as metadata storage
  version: '1.0'
  contact:
    name: Peter Heiss
    email: peter.heiss@uni-muenster.de
  description: |-
    This api describes the metadata endpoints, which have to be implemented by all ports in the rds system, so the system is enabled to retrieve and set metadata from all different plattforms without knowing them.

    You can imagine, that this api is like an interface that every port has to implement it.

    All endpoints, which are described here, represents the required fields from datacite data scheme. So you can implement more endpoints in your port to support more fields, but this is required to work within rds system as a metadata port.
servers:
  - url: 'http://port:3000/metadata'
paths:
  '/project/{project-id}':
    parameters:
      - schema:
          type: string
        name: project-id
        in: path
        required: true
    get:
      summary: Get all metadata
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metadata'
              examples:
                example-1:
                  value:
                    titles:
                      - title: long title
                        lang: en
                    publisher: research publisher gmbh
                    type:
                      resourceType: ''
                      resourceTypeGeneral: Poster
      description: |-
        Take a look at the datacite specification (https://raw.githubusercontent.com/datacite/schema/master/source/json/kernel-4.3/datacite_4.3_schema.json) for all useable keywords. 

        See the examples to see, how to use it.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                apiKey:
                  type: string
                metadata:
                  anyOf:
                    - type: object
                    - type: 'null'
                userId:
                  type: string
            examples:
              example-1:
                value:
                  titles: ''
                  publisher: ''
                  type: ''
        description: ''
    delete:
      summary: Remove a project from this service
      responses:
        '204':
          description: No Content
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                apiKey:
                  type: string
                userId:
                  type: string
    patch:
      summary: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metadata'
              examples:
                example-1:
                  value:
                    titles:
                      - title: long title
                        lang: en
                    publisher: research publisher gmbh
                    type:
                      resourceType: ''
                      resourceTypeGeneral: Poster
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                apiKey:
                  type: string
                metadata:
                  anyOf:
                    - type: object
                    - type: 'null'
                userId:
                  type: string
            examples:
              example-1:
                value:
                  apiKey: 123
                  userId: 1
                  metadata:
                    titles:
                      - title: long title
                        lang: en
                    publisher: research publisher gmbh
                    type:
                      resourceType: ''
                      resourceTypeGeneral: Poster
        description: The given body has to be valid against the datacite jsonschema (without required fields).
    put:
      summary: ''
      responses:
        '204':
          description: No Content
        '400':
          description: Continue
      description: |-
        Publishes the project, if possible.
        This will disable any future changes to the given projectId.
  '/project/{project-id}/files':
    parameters:
      - schema:
          type: string
        name: project-id
        in: path
        required: true
    get:
      summary: Get all files
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/File'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                apiKey:
                  type: string
                userId:
                  type: string
    post:
      summary: Add a file
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                apiKey:
                  type: string
                userId:
                  type: string
                files:
                  type: object
                filename:
                  type: string
    delete:
      summary: ''
      responses:
        '200':
          description: OK
  '/project/{project-id}/files/{file-id}':
    parameters:
      - schema:
          type: string
        name: project-id
        in: path
        required: true
      - schema:
          type: string
        name: file-id
        in: path
        required: true
    get:
      summary: Get specified file
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
      description: ''
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                apiKey:
                  type: string
                userId:
                  type: string
    patch:
      summary: ''
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                apiKey:
                  type: string
                userId:
                  type: string
        description: ''
    delete:
      summary: ''
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                apiKey:
                  type: string
                userId:
                  type: string
        description: ''
  /project:
    get:
      summary: Returns all projects available in the service for user
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
              examples: {}
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                apiKey:
                  type: string
                userId:
                  type: string
    parameters: []
    post:
      summary: Add a new project to the service
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                metadata:
                  type: object
                apiKey:
                  type: string
                userId:
                  type: string
  /informations:
    get:
      summary: Informations about this port implementation
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  fileTransferMode:
                    type: integer
                    description: 'Set value between 0=active and 1=passive. This is relevant for file transfer, because active will trigger the upload via RDS (push mode). Passive will trigger the upload via the service (pull mode).'
                    example: 0
                    minimum: 0
                    maximum: 1
                  fileTransferArchive:
                    type: string
                    description: |-
                      If empty, all files will be transfered one by one to the service.
                      If set to one of the followed algorithms, it will be used to store all files to one archive and then transmitted within one call.

                      Supported Algorithms: ["", "zip"]
                    example: zip
                  loginMode:
                    type: integer
                    description: |-
                      Describe, if it needs credentials (0) or oauth (1).

                      If set to 0, look at credentials field to know, what needs to be captured from the user. 
                      Otherwise credentials can be leave out.

                      Because the workflow with oauth in bootstrap, this is only a reminder for the web frontend, because it can handle the loginMode easier with such a field, instead of looking in the userServices to find out, if there are oauth token or not.
                  credentials:
                    type: object
                    description: 'it defines, if the user can enter userId and / or password, if this is needed. Most times, you will need userId and password, when oauth2 workflow not sent in registering while boot up. When oauth2 informations were provided in starts up, this will be ignored.'
                    properties:
                      userId:
                        type: boolean
                      password:
                        type: boolean
                required:
                  - fileTransferMode
                  - fileTransferArchive
                  - loginMode
      description: returns relevant informations about this port implementation.
components:
  schemas:
    File:
      title: File
      type: object
      properties:
        id:
          type: string
        filename:
          type: string
        content:
          type: string
    Project:
      title: Project
      type: object
      description: 'Represents a project in the service, which will be connected through the implementation of this port.'
      properties:
        projectId:
          type: string
        metadata:
          $ref: '#/components/schemas/Metadata'
    Metadata:
      title: Metadata
      type: object
      x-examples:
        example-1: {}
  securitySchemes:
    oauth-key:
      type: oauth2
      flows:
        password:
          tokenUrl: ''
          refreshUrl: ''
          scopes: {}
      description: ''
